#!/bin/sh

RUNTIME_DIR=/opt/jungi
PACKAGES_DIR=$RUNTIME_DIR/packages

package_url() {
    package_name="$1"
    echo "https://github.com/piku235/$package_name/releases/latest/download/$package_name.jpk"
}

run_script() {
    script=$1

    if [ -x "$script" ]; then
        RUNTIME_DIR="$RUNTIME_DIR" "$script"
        rc=$?

        if [ $rc -ne 0 ]; then
            exit $rc
        fi
    fi
}

setup_services() {
    package_dir=$1

    if [ -d "$package_dir/etc/init.d" ]; then
        find "$package_dir/etc/init.d" -name '*.template' -maxdepth 1 -type f | while read f; do
            service="${f#$package_dir/etc/init.d/}"
            service="${service%.template}"
            sed "s|\${RUNTIME_DIR}|$RUNTIME_DIR|g" "$f" > "$package_dir/etc/init.d/$service"
            chmod +x "$package_dir/etc/init.d/$service"

            if [ ! -e "/etc/init.d/$service" ] || ! cmp "$package_dir/etc/init.d/$service" "/etc/init.d/$service"; then
                mv "$package_dir/etc/init.d/$service" "/etc/init.d/$service"
            fi
        done;
    fi
}

install() {
    package_name="$1"
    package_url=$(package_url $package_name)

    if [ -z "$package_name" ]; then
        echo "Missing package name"
        exit 1
    fi

    if [ -d "$PACKAGES_DIR/$package_name" ]; then
        echo "Package: $package_name is already installed"
        exit 1
    fi

    tempdir=$(mktemp -d)

    cleanup() {
        [ -n "$tempdir" ] && rm -rf "$tempdir" || true
    }

    trap cleanup EXIT

    echo "Downloading the package"
    wget -qO "$tempdir/.jpk" --no-check-certificate "$package_url"

    if [ $? -ne 0 ]; then
        echo "Failed to download the package, are you sure it exists?"
        exit 1
    fi

    echo "Extracting the package"
    gzip -dc "$tempdir/.jpk" | tar -xf - -C $tempdir .

    if [ $? -ne 0 ]; then
        echo "Failed to extract the package"
        exit 1
    fi

    echo "Installing version $package_version"
    run_script "$tempdir/.pkg/preinst"

    mkdir -p "$PACKAGES_DIR/$package_name"
    cp "$tempdir/.pkg/version" "$PACKAGES_DIR/$package_name"
    package_version=$(cat "$PACKAGES_DIR/$package_name/version")

    cp -ar "$tempdir/*" $RUNTIME_DIR
    (cd "$tempdir" && find . \( -type f -o -type l \) ! -path '*/.*') | sed 's|^\./||' > "$PACKAGES_DIR/$package_name/files"

    [ -x "$tempdir/.pkg/prerm" ] && cp -a "$tempdir/.pkg/prerm" "$PACKAGES_DIR/$package_name"
    [ -x "$tempdir/.pkg/postrm" ] && cp -a "$tempdir/.pkg/postrm" "$PACKAGES_DIR/$package_name"

    setup_services "$tempdir"
    run_script "$tempdir/.pkg/postinst"
}

update() {
    package_name="$1"
    package_url=$(package_url $package_name)

    if [ -z "$package_name" ]; then
        echo "Missing package name"
        exit 1
    fi

    if [ ! -d "$PACKAGES_DIR/$package_name" ]; then
        echo "Package: $package_name is not installed"
        exit 1
    fi

    tempdir=$(mktemp -d)

    cleanup() {
        [ -n "$tempdir" ] && rm -rf "$tempdir" || true
    }

    trap cleanup EXIT

    echo "Downloading the package"
    wget -qO "$tempdir/.jpk" --no-check-certificate "$package_url"

    if [ $? -ne 0 ]; then
        echo "Failed to download the package"
        exit 1
    fi

    echo "Extracting the package"
    gzip -dc "$tempdir/.jpk" | tar -xf - -C $tempdir .

    if [ $? -ne 0 ]; then
        echo "Failed to extract the package"
        exit 1
    fi

    downloaded_package_version=$(cat "$tempdir/.pkg/version")
    package_version=$(cat "$PACKAGES_DIR/$package_name/version")

    if [ $downloaded_package_version = $package_version ]; then
        echo "Package is already at the lastest v$package_version"
        exit 1
    fi;

    echo "Updating to version $package_version"
    run_script "$tempdir/.pkg/preinst"
    run_script "$PACKAGES_DIR/$package_name/prerm"

    echo "Removing obsolete files"
    [ -f "$PACKAGES_DIR/$package_name/files" ] && while read f; do
        source="$RUNTIME_DIR/$f"
        if [ ! -e "$tempdir/$f" ]; then
            rm -f "$source"
            echo "$f"
        fi
    done < "$PACKAGES_DIR/$package_name/files"
    rm -f "$PACKAGES_DIR/$package_name/files"

    echo "Updating files"
    find "$tempdir/files" \( -type f -o -type l \) ! -path '*/.*' | while read f; do
        relative="${f#$tempdir/}"
        dest="$RUNTIME_DIR/$relative"
        mkdir -p "$(dirname "$dest")"
        if [ ! -e "$dest" ] || ! cmp -s "$f" "$dest"; then
            cp -a "$f" "$dest"
            echo "$relative"
        fi
        echo "$relative" >> "$PACKAGES_DIR/$package_name/files"
    done

    [ -x "$tempdir/.pkg/prerm" ] && cp -a "$tempdir/.pkg/prerm" "$PACKAGES_DIR/$package_name"
    [ -x "$tempdir/.pkg/postrm" ] && cp -a "$tempdir/.pkg/postrm" "$PACKAGES_DIR/$package_name"
    
    setup_services "$tempdir"
    run_script "$tempdir/.pkg/postinst"
}

remove() {
    package_name="$1"

    if [ -z "$package_name" ]; then
        echo "Missing package name"
        exit 1
    fi

    if [ ! -d "$PACKAGES_DIR/$package_name" ]; then
        echo "Package is not installed."
        exit 1
    fi

    echo "Removing package"
    run_script "$PACKAGES_DIR/$package_name/prerm"

    if [ -f "$PACKAGES_DIR/$package_name/files" ]; then
        while read f; do rm -f "$f"
        done < "$PACKAGES_DIR/$package_name/files"
    fi

    rm -rf "$PACKAGES_DIR/$package_name"
    run_script "$PACKAGES_DIR/$package_name/postrm"
}

show_usage() {
    cat <<'EOF'
Usage:
    pkg install <package_name>   install a new package
    pkg update <package_name>    update an existing package if newer
    pkg remove <package_name>    remove an installed package
EOF
}

case "$1" in
    install) shift; install "$@";;
    remove) shift; remove "$@";;
    update) shift; update "$@";;
    *) show_usage;;
esac
