name: Release Build

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      OPENWRT_VERSION: "24.10.3"
      GCC_VERSION: "12.3.0"
      MAIN_TARGET: "ramips"
      SUB_TARGET: "mt76x8"
      ARCH: "mipsel_24kc"

    steps:
    - uses: actions/checkout@v5

    - name: Common strings
      id: strings
      shell: bash
      run: |
        echo "build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies
      run: sudo apt-get update && build-essential patchelf clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget

    - name: Download OpenWRT SDK
      run: |
        wget https://downloads.openwrt.org/releases/${OPENWRT_VERSION}/targets/${MAIN_TARGET}/${SUB_TARGET}/openwrt-sdk-${OPENWRT_VERSION}-${MAIN_TARGET}-${SUB_TARGET}_gcc-${GCC_VERSION}_musl.Linux-x86_64.tar.xz
        tar -xf openwrt-sdk-${OPENWRT_VERSION}-${MAIN_TARGET}-${SUB_TARGET}_gcc-${GCC_VERSION}_musl.Linux-x86_64.tar.xz
        mv openwrt-sdk-${OPENWRT_VERSION}-${MAIN_TARGET}-${SUB_TARGET}_gcc-${GCC_VERSION}_musl.Linux-x86_64.tar.xz openwrt-sdk

    - name: Download protobuf v2.6.1
      id: protobuf
      run: |
        wget https://github.com/protocolbuffers/protobuf/archive/refs/tags/v2.6.1.zip
        unzip v2.6.1.zip
        echo "dir=protobuf-2.6.1" >> "$GITHUB_OUTPUT"

    - name: Setup SDK
      run: |
        export PATH=$PWD/openwrt-sdk/staging_dir/toolchain-${ARCH}_gcc-${GCC_VERSION}/bin:$PATH
        export TARGET_DIR=$PWD/openwrt-sdk/staging_dir/target-${ARCH}_musl
        export STAGING_DIR=$PWD/openwrt-sdk/staging_dir/toolchain-${ARCH}_gcc-${GCC_VERSION}

    - name: Install SDK feeds
      run: |
        openwrt-sdk/scripts/feeds update -a
        openwrt-sdk/scripts/feeds install -a
        make defconfig

    - name: Build packages
      run: |
        make -j$(nproc) package/openssl/compile
        make -j$(nproc) package/mosquitto/compile
        make -j$(nproc) package/sqlite3/compile

    - name: Compile protobuf-lite
      working-directory: ${{ steps.protobuf.outputs.dir }}
      run: |
        autoreconf -f -i -Wall,no-obsolete
        ./configure --with-pic --disable-static --host=mipsel-openwrt-linux
        make CXXFLAGS="-march=24kec -mxgot -fPIC -w" -j$(nproc) -C src libprotobuf-lite.la
        patchelf --remove-rpath src/.libs/libprotobuf-lite.so

    - name: Build package
      run: |
        mkdir -p runtime/opt/jungi/lib
        cp -a ${{ steps.protobuf.outputs.dir }}/src/.libs/libprotobuf-lite.so runtime/opt/jungi/lib
        ln -s libprotobuf-lite.so runtime/opt/jungi/lib/libprotobuf-lite.so.9
        cp -a $TARGET_DIR/usr/lib/libcares.so* runtime/opt/jungi/lib
        cp -a $TARGET_DIR/usr/lib/libcjson.so* runtime/opt/jungi/lib
        cp -a $TARGET_DIR/usr/lib/libcrypto.so* runtime/opt/jungi/lib
        cp -a $TARGET_DIR/usr/lib/libssl.so* runtime/opt/jungi/lib
        cp -a $TARGET_DIR/usr/lib/libmosquitto.so* runtime/opt/jungi/lib
        cp -a $TARGET_DIR/usr/lib/libmosquittopp.so* runtime/opt/jungi/lib
        cp -a $TARGET_DIR/usr/lib/libsqlite3.so* runtime/opt/jungi/lib
        cp -a $TARGET_DIR/usr/lib/libz.so* runtime/opt/jungi/lib
        cp -a $STAGING_DIR/lib/ld-musl-mipsel-sf.so.1 runtime/opt/jungi/lib
        cp -a $STAGING_DIR/lib/libatomic.so* runtime/opt/jungi/lib
        cp -a $STAGING_DIR/lib/libc.so runtime/opt/jungi/lib
        cp -a $STAGING_DIR/lib/libgcc_s.so* runtime/opt/jungi/lib
        cp -a $STAGING_DIR/lib/libstdc++.so* runtime/opt/jungi/lib
        cp -ar scripts runtime/opt/jungi/
        tar -czf runtime.tar.gz -C runtime .

    - name: Upload
      uses: softprops/action-gh-release@v2
      with:
        files: runtime.tar.gz
