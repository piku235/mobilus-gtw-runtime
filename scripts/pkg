#!/bin/sh
set -e

RUNTIME_DIR=/opt/jungi
PACKAGES_DIR=$RUNTIME_DIR/packages

package_url() {
    local package_name="$1"
    echo "https://github.com/piku235/$package_name/releases/latest/download/$package_name.jpk"
}

install() {
    local package_name="$1"
    local package_file="$package_name.jpk"
    local package_url=$(package_url $package_name)
    local tempdir=$(mktemp -d)

    if [ -d "$PACKAGES_DIR/$package_name" ]; then
        echo "Package: $package_name is already installed"
        exit 1
    fi

    cleanup() {
        rm -rf "$tempdir"
    }

    trap cleanup EXIT INT TERM

    wget -qO "$tempdir/$package_file" --no-check-certificate "$package_url"

    if [ $? -eq 0 ]; then
        echo "Downloading the package: $package_name"
    else
        echo "Failed to download the package: $package_name. Are you sure it exists?"
        exit 1
    fi

    echo "Extracting the package"
    gzip -dc "$package_file" | tar -xf - -C $tempdir .

    if [ $? -ne 0 ]; then
        echo "Failed to extract the package"
        exit 1
    fi

    mkdir -p "$PACKAGES_DIR/$package_name"
    cp "$tempdir/version" "$PACKAGES_DIR/$package_name"
    package_version=$(cat "$PACKAGES_DIR/$package_name/version")

    echo "Copying files ..."

    if [ -d "$tempdir/files" ]; then
        cd "$tmpdir/files"
        find . -type f -o -type l | while read f; do
            relative="${f#$tmpdir/files/}"
            dest="$RUNTIME_DIR/$relative"
            mkdir -p "$(dirname "$dest")"
            cp -a "$f" "$dest"
            echo "$dest" >> "$PACKAGES_DIR/$package_name/files"
        done
    fi

    [ -x "$tmpdir/prerm" ] && cp -a "$tmpdir/prerm" "$PACKAGES_DIR/$package_name"

    echo "Post scripts ..."
    [ -x "$tmpdir/postinst" ] && "$tmpdir/postinst"

    echo "Installed $package_name v$package_version"
}

update() {
    local package_name="$1"
    local package_file="$package_name.jpk"
    local package_url=$(package_url $package_name)
    local tempdir=$(mktemp -d)

    if [ ! -d "$PACKAGES_DIR/$package_name" ]; then
        echo "Package: $package_name is not installed"
        exit 1
    fi

    cleanup() {
        rm -rf "$tempdir"
    }

    trap cleanup EXIT INT TERM

    wget -qO "$tempdir/$package_file" --no-check-certificate "$package_url"

    if [ $? -eq 0 ]; then
        echo "Downloading the package: $package_name"
    else
        echo "Failed to download the package: $package_name"
        exit 1
    fi

    echo "Extracting the package"
    gzip -dc "$package_file" | tar -xf - -C $tempdir .

    if [ $? -ne 0 ]; then
        echo "Failed to extract the package"
        exit 1
    fi

    downloaded_package_version=$(cat "$tempdir/version")
    package_version=$(cat "$PACKAGES_DIR/$package_name/version")

    if [ $downloaded_package_version = $package_version ]; then
        echo "Package: $package_name is already at the lastest v$package_version"
        exit 1
    fi;

    echo "Pre scripts ..."
    [ -x "$PACKAGES_DIR/$package_name/prerm" ] && "$PACKAGES_DIR/$package_name/prerm"

    echo "Removing obsolete files"
    [ -f "$PACKAGES_DIR/$package_name/files" ] && while read f; do
        if ! grep -qxF "$f" "$tempdir/files"; then
            rm -rf "$f"
        fi
    done < "$PACKAGES_DIR/$package_name/files"
    rm -f "$PACKAGES_DIR/$package_name/files"

    echo "Copying files ..."
    if [ -d "$tempdir/files" ]; then
        cd "$tmpdir/files"
        find . -type f -o -type l | while read f; do
            relative="${f#$tmpdir/files/}"
            dest="$RUNTIME_DIR/$relative"
            mkdir -p "$(dirname "$dest")"

            if [ ! -e "$dest" ] || ! cmp -s "$f" "$dest"; then
                mkdir -p "$(dirname "$dest")"
                cp -a "$f" "$dest"
            fi

            echo "$dest" >> "$PACKAGES_DIR/$package_name/files"
        done
    fi

    [ -x "$tmpdir/prerm" ] && cp -a "$tmpdir/prerm" "$PACKAGES_DIR/$package_name"
    [ -x "$tmpdir/postinst" ] && "$tmpdir/postinst"

    echo "Installed $package_name v$package_version"
}

remove() {
    local package_name="$1"

    if [ ! -d "$PACKAGES_DIR/$package_name" ]; then
        echo "Package: $package_name is not installed."
        exit 1
    fi

    echo "Pre scripts ..."
    [ -x "$PACKAGES_DIR/$package_name/prerm" ] && "$PACKAGES_DIR/$package_name/prerm"

    echo "Removing files"
    if [ -f "$PACKAGES_DIR/$package_name/files" ]; then
        while read f; do rm -f "$f"
        done < "$PACKAGES_DIR/$package_name/files"
    fi

    rm -rf "$PACKAGES_DIR/$package_name"
    echo "Package: $package_name has been removed"
}

show_usage() {
    cat <<'EOF'
Usage:
    pkg install <package_name>   install a new package
    pkg update <package_name>    update an existing package if newer
    pkg remove <package_name>    remove an installed package
EOF
}

case "$1" in
    install) shift; install "$@";;
    remove) shift; remove "$@";;
    update) shift; update "$@";;
    *) show_usage;;
esac
