#!/bin/sh

RUNTIME_DIR=/opt/jungi
PACKAGES_DIR=$RUNTIME_DIR/packages

package_url() {
    package_name="$1"
    echo "https://github.com/piku235/$package_name/releases/latest/download/$package_name.jpk"
}

install() {
    package_name="$1"
    package_file="$package_name.jpk"
    package_url=$(package_url $package_name)

    if [ -z "$package_name" ]; then
        echo "Missing package name"
        exit 1
    fi

    if [ -d "$PACKAGES_DIR/$package_name" ]; then
        echo "Package: $package_name is already installed"
        exit 1
    fi

    tempdir=$(mktemp -d)

    cleanup() {
        [ -n "$tempdir" ] && rm -rf "$tempdir" || true
    }

    trap cleanup EXIT

    echo "Downloading the package"
    wget -qO "$tempdir/$package_file" --no-check-certificate "$package_url"

    if [ $? -ne 0 ]; then
        echo "Failed to download the package, are you sure it exists?"
        exit 1
    fi

    echo "Extracting the package"
    gzip -dc "$tempdir/$package_file" | tar -xf - -C $tempdir .

    if [ $? -ne 0 ]; then
        echo "Failed to extract the package"
        exit 1
    fi

    mkdir -p "$PACKAGES_DIR/$package_name"
    cp "$tempdir/version" "$PACKAGES_DIR/$package_name"
    package_version=$(cat "$PACKAGES_DIR/$package_name/version")

    echo "Installing version $package_version"

    if [ -d "$tempdir/files" ]; then
        cp -ar "$tempdir/files/." /
        (cd "$tempdir/files" && find . \( -type f -o -type l \)) | sed 's|^\./|/|' > "$PACKAGES_DIR/$package_name/files"
    fi

    [ -x "$tempdir/prerm" ] && cp -a "$tempdir/prerm" "$PACKAGES_DIR/$package_name"
    [ -x "$tempdir/postinst" ] && "$tempdir/postinst"
}

update() {
    package_name="$1"
    package_file="$package_name.jpk"
    package_url=$(package_url $package_name)

    if [ -z "$package_name" ]; then
        echo "Missing package name"
        exit 1
    fi

    if [ ! -d "$PACKAGES_DIR/$package_name" ]; then
        echo "Package: $package_name is not installed"
        exit 1
    fi

    tempdir=$(mktemp -d)

    cleanup() {
        [ -n "$tempdir" ] && rm -rf "$tempdir" || true
    }

    trap cleanup EXIT

    echo "Downloading the package"
    wget -qO "$tempdir/$package_file" --no-check-certificate "$package_url"

    if [ $? -ne 0 ]; then
        echo "Failed to download the package"
        exit 1
    fi

    echo "Extracting the package"
    gzip -dc "$tempdir/$package_file" | tar -xf - -C $tempdir .

    if [ $? -ne 0 ]; then
        echo "Failed to extract the package"
        exit 1
    fi

    downloaded_package_version=$(cat "$tempdir/version")
    package_version=$(cat "$PACKAGES_DIR/$package_name/version")

    if [ $downloaded_package_version = $package_version ]; then
        echo "Package is already at the lastest v$package_version"
        exit 1
    fi;

    echo "Updating to version $package_version"

    [ -x "$PACKAGES_DIR/$package_name/prerm" ] && "$PACKAGES_DIR/$package_name/prerm"

    echo "Removing obsolete files"
    [ -f "$PACKAGES_DIR/$package_name/files" ] && while read f; do
        if [ ! -e "$tempdir/files$f" ]; then
            rm -rf "$f"
            echo "$f"
        fi
    done < "$PACKAGES_DIR/$package_name/files"
    rm -f "$PACKAGES_DIR/$package_name/files"

    echo "Updating files"
    if [ -d "$tempdir/files" ]; then
        find "$tempdir/files" \( -type f -o -type l \) | while read f; do
            dest="/${f#$tempdir/files/}"
            mkdir -p "$(dirname "$dest")"
            if [ ! -e "$dest" ] || ! cmp -s "$f" "$dest"; then
                cp -a "$f" "$dest"
                echo "$dest"
            fi
            echo "$dest" >> "$PACKAGES_DIR/$package_name/files"
        done
    fi

    [ -x "$tempdir/prerm" ] && cp -a "$tempdir/prerm" "$PACKAGES_DIR/$package_name"
    [ -x "$tempdir/postinst" ] && "$tempdir/postinst"
}

remove() {
    package_name="$1"

    if [ -z "$package_name" ]; then
        echo "Missing package name"
        exit 1
    fi

    if [ ! -d "$PACKAGES_DIR/$package_name" ]; then
        echo "Package is not installed."
        exit 1
    fi

    echo "Removing package"

    [ -x "$PACKAGES_DIR/$package_name/prerm" ] && "$PACKAGES_DIR/$package_name/prerm"

    if [ -f "$PACKAGES_DIR/$package_name/files" ]; then
        while read f; do rm -f "$f"
        done < "$PACKAGES_DIR/$package_name/files"
    fi

    rm -rf "$PACKAGES_DIR/$package_name"
}

show_usage() {
    cat <<'EOF'
Usage:
    pkg install <package_name>   install a new package
    pkg update <package_name>    update an existing package if newer
    pkg remove <package_name>    remove an installed package
EOF
}

case "$1" in
    install) shift; install "$@";;
    remove) shift; remove "$@";;
    update) shift; update "$@";;
    *) show_usage;;
esac
